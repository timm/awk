#!/usr/bin/env bash
Lib=$HOME/opt/awk
Dir=$(cd $( dirname "${BASH_SOURCE[0]}" ) && pwd )
Tmux=$(which tmux)
Needs="gawk bash"

md2awk() { gawk '
  BEGIN            { Pre="#" }
  sub(/```awk/,"") { Pre=""  ; print; next}
  sub(/```/,"")    { Pre="# "; print; next}
  /^@include / { print; next }
  /^function[ \t]+[A-Z][^\(]*\(/ {
      split($0,a,/[ \t\(]/)
      PREFIX = a[2]
  }
  { gsub(/ _/," " PREFIX "_",$0)
    print Pre gensub( /\.([^0-9\\*\\$\\+])([a-zA-Z0-9_]*)/, 
                      "[\"\\1\\2\"]","g", $0)
  }' 
}
md2awks() {
  for i in *.md; do 
    j=$(basename $i .md).awk
    cat $i | md2awk > $Lib/$j
  done
}

doc() {
  cat $Dir/README.md | gawk '
        BEGIN { FS="\n"; RS="" } 
              { print; exit 0  }'  
  cat $1 | gawk '
        BEGIN { FS="\n"; RS="" } 
        NR==1 && $1~/name=top>/ { next }
              { print ""; print }'  
}
docs() {
  local f=`ls $Dir/src/*.md 2>/dev/null`
  if [ -n "$f" ]; then 
    for g in $f
    do
       if [ "$Dir/README.md" -nt "$g" ]; then
         local h=$(mktemp)
         doc $g > $h
         mv $h $g
       fi
    done
  fi
}

if [ "$1" == "--md" ]; then
  docs
  exit
elif [ "$1" == "--all" ]; then
  rm -f $Lib/*
  md2awks
  exit
elif [ -n "$1" ]; then
  f=$(basename $1 .md).awk
  shift
  md2awks
  if [ -t 0 ]
  then       AWKPATH="$Lib:./:$AWKPATH" gawk -f $Lib/$f $*
  else cat -|AWKPATH="$Lib:./:$AWKPATH" gawk -f $Lib/$f $*
  fi
  exit
fi

####################################
mkdir -p $Lib
chmod +x $Dir/gold

for c in $Needs; do
  if [ -z `which $c` ]; then
     >&2 echo "# W: please install $c"
  fi
done

hello() {
  clear
  tput bold; tput setaf 32; cat <<-'EOF'

        .-"-.
       /  ,~a\_
       \  \__))>  a little awk
       ,) ." \     goes a long way
      /  (    \
     /   )    ;
    /   /     /
  ,/_."`  _.-`
   /_/`"\\___
        `~~~`

EOF
  tput sgr0
  tput bold; tput setaf 0
  awk '/^alias/ {print $0}'   $Dir/gold
  echo ""
  tput sgr0
}

alias bye="$Tmux kill-session"                # exit
alias ga='git add *'                          # add to local repo
alias gg='git pull'                           # update code from web
alias gp='ga;git commit -am save;git push;gs' # end-of-day actions
alias gs='git status'                         # status 
alias ls='ls -G'                              # ls
#alias ok="dart -U "                           # run a unit test
#alias oks="dart -U all"                       # run all unit tests
#alias okspy="rerun 'lua dart.lua -U all'"     # retest if files change
alias reload='. $Dir/gold'                     # reload these tools
alias tmux=mytmux                             # 2-pane tmux environment
alias vims="vim +PluginInstall +qall"         # install vim plugins 

here() { cd $1; basename `pwd`; }    
PROMPT_COMMAND='echo -ne " 🐤 $(git branch 2>/dev/null | grep '^*' | colrm 1 2):";PS1="$(here ..)/$(here .):\!\e[m ▶ "'     

mytmux() {
  session=$RANDOM
  $Tmux start-server
  sleep 1
  $Tmux new-session -d -s $session  
  $Tmux send-keys ". $Dir/$Sh"  C-m  ". $Dir/gold; hello" C-m

  $Tmux splitw -h -p 20
  $Tmux selectp -t 1
  $Tmux send-keys ".  $Dir/$Sh"  C-m  ". $Dir/gold; clear" C-m

  $Tmux splitw -v  -p 5
  $Tmux selectp -t 2
  $Tmux send-keys ".  $Dir/$Sh"  C-m  "htop"  C-m

  $Tmux attach-session -t $session
}
startup() {
  if [ ! -d "$HOME/.vim/bundle" ]; then
     git clone https://github.com/VundleVim/Vundle.vim.git \
           ~/.vim/bundle/Vundle.vim
     vims
  fi
  [ -z "$TMUX" ] && mytmux
}

want=$Dir/src/gold.awk
mkdir -p $(dirname $want)
[ -f "$want" ] || cat<<-'EOF'>$want
	# vim: ft=awk ts=2 sw=2 et :
	BEGIN {DOT="."; DASH="_"}
	
	#### object system
	function isa(i,klass)    { Obj(i); i["isa"] = klass }
	function List(i)         { split("",i,"") }
	function Obj(i)          { List(i); i["isa"] = "Obj"; i["id"] = ++ID; return ID }
	function zap(i,k)        { k=k?k:length(i)+1; i[k][0]; List(i[k]); return k } 
	function has( i,k,f,  s) { f=f?f:"List"; s=zap(i,k); @f(i[k]); return s}
	function hasmore(i,f)    { return has(i,"",f) }
	
	#### unit testing
	function ok(f,a,   n) { 
	   a ? ++PASS : ++FAIL
	   n = int(0.5+100*PASS/(PASS+FAIL+0.00001))"% : " f 
	   print a ? green("Pass " n ) : red("Fail " n) 
	}
	
	function red(x)   { return "\033[31m"x"\033[0m" }
	function green(x) { return "\033[32m"x"\033[0m" }
	
	function tests(   fun,s) { 
	  s= THE["stats"]["seed"]
	  for(fun in FUNCTAB) 
	    if(fun ~ /^ok./) {
	      srand(s?s:1)
	      @fun(fun)
	  } 
	  print((PASS?green("PASS " PASS):""),
	        (FAIL ? red("FAIL " FAIL) : ""))
	  rogues()
	} 
	function rogues(    s) {
	  for(s in SYMTAB) 
	    if (s ~ /^[A-Z][a-z]/) print red("#W> Global " s)>"/dev/stderr"
	  for(s in SYMTAB) 
	    if (s ~ /^[_a-z]/)     print red("#W> Rogue: " s)>"/dev/stderr"
	}
EOF

want=$HOME/.config/htop/htoprc
mkdir -p $(dirname $want)
[ -f "$want" ] || cat<<-'EOF'>$want
	# Beware! This file is rewritten by htop when settings are changed in the interface.
	# The parser is also very primitive, and not human-friendly.
	fields=0 48 17 18 38 39 2 46 47 49 1
	sort_key=46
	sort_direction=1
	hide_threads=0
	hide_kernel_threads=1
	hide_userland_threads=0
	shadow_other_users=0
	show_thread_names=0
	show_program_path=1
	highlight_base_name=0
	highlight_megabytes=1
	highlight_threads=1
	tree_view=0
	header_margin=1
	detailed_cpu_time=0
	cpu_count_from_zero=0
	update_process_names=0
	account_guest_in_cpu_meter=0
	color_scheme=0
	delay=15
	left_meters=AllCPUs Memory
	left_meter_modes=1 1
	right_meters=Clock Memory Swap
	right_meter_modes=4 1 1
EOF
	 
want=$Dir/README.md
[ -f "$want" ] || cat<<'EOF'>$want
<a name=top>Header<br>
<p align=center>README</p>
<hr>

EOF

want=$Dir/.travis.yml
[ -f "$want" ] || cat<<'EOF'>$want
language: C

sudo: true

install:
  - wget -O gawk.tar.gz https://ftp.gnu.org/gnu/gawk/gawk-5.1.0.tar.gz
  - tar xzf gawk.tar.gz
  - cd gawk-5.1.0
  - ./configure; sudo make; sudo make install
  - cd ..

script:
  - chmod +x gold
  - sh gold.sh --tests
EOF
	 
want=$HOME/.vimrc
[ -f "$want" ] || cat<<-'EOF'>$want
	set list
	set listchars=tab:>-
	set backupdir-=.
	set backupdir^=~/tmp,/tmp
	set nocompatible
	"filetype plugin indent on
	set modelines=3
	set scrolloff=3
	set autoindent
	set hidden "remember ls
	set wildmenu
	set wildmode=list:longest
	set visualbell
	set ttyfast
	set backspace=indent,eol,start
	set laststatus=2
	set splitbelow
	set paste
	set mouse=a
	set title
	set number
	set relativenumber
	autocmd BufEnter * cd %:p:h
	set showmatch
	set matchtime=15
	set background=light
	set syntax=on
	syntax enable
	set ignorecase
	set incsearch
	set smartcase
	set showmatch
	set hlsearch
	set nofoldenable    " disable folding
	set ruler
	set laststatus=2
	set statusline=
	set statusline+=%F
	set statusline+=\ 
	set statusline+=%m
	set statusline+=%=
	set statusline+=%y
	set statusline+=\ 
	set statusline+=%c
	set statusline+=:
	set statusline+=%l
	set statusline+=\ 
	set lispwords+=until
	set path+=../**
	if has("mouse_sgr")
	    set ttymouse=sgr
	else
	    set ttymouse=xterm2
	end
	colorscheme default
	set termguicolors
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	map Z 1z=
	set spell spelllang=en_us
	set spellsuggest=fast,20 "Don't show too much suggestion for spell check
	nn <F7> :setlocal spell! spell?<CR>
	let g:vim_markdown_fenced_languages = ['awk=awk']
	set nocompatible              " be iMproved, required
	filetype off                  " required
	
	" set the runtime path to include Vundle and initialize
	set rtp+=~/.vim/bundle/Vundle.vim
	call vundle#begin()
	" alternatively, pass a path where Vundle should install plugins
	"call vundle#begin('~/some/path/here')
	
	" let Vundle manage Vundle, required
	Plugin 'VundleVim/Vundle.vim'
	Plugin 'tpope/vim-fugitive'
	Plugin 'scrooloose/nerdtree'
	Plugin 'tbastos/vim-lua'
	Plugin 'airblade/vim-gitgutter'
	"Plugin 'itchyny/lightline.vim'
	Plugin 'junegunn/fzf'
	"  Plugin 'humiaozuzu/tabbar'
	"  Plugin 'drmingdrmer/vim-tabbar'
	Plugin 'tomtom/tcomment_vim'
	Plugin 'ap/vim-buftabline'
	Plugin 'junegunn/fzf.vim'
	Plugin 'jnurmine/Zenburn'
	Plugin 'altercation/vim-colors-solarized'
	Plugin 'nvie/vim-flake8'
	Plugin 'seebi/dircolors-solarized'
	Plugin 'nequo/vim-allomancer'
	Plugin 'nanotech/jellybeans.vim'
	Plugin 'tell-k/vim-autopep8'
	Plugin 'vimwiki/vimwiki'
	Plugin 'kchmck/vim-coffee-script'
	Plugin 'tpope/vim-markdown'
	" All of your Plugins must be added before the following line
	call vundle#end()            " required
	filetype plugin indent on    " required
	" To ignore plugin indent changes, instead use:
	"filetype plugin on
	let g:autopep8_indent_size=2
	let g:autopep8_max_line_length=70
	let g:autopep8_on_save = 1
	let g:autopep8_disable_show_diff=1
	autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>
	colorscheme jellybeans
	map <C-o> :NERDTreeToggle<CR>
	nnoremap <Leader><space> :noh<cr>
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
	set titlestring=%{expand(\"%:p:h\")}
	hi Normal guibg=NONE ctermbg=NONE
	hi NonText guibg=NONE ctermbg=NONE
	set fillchars=vert:\|
	hi VertSplit cterm=NONE
	set ts=2
	set sw=2
	set sts=2
	set et
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
	set hidden
	nnoremap <C-N> :bnext<CR>
	nnoremap <C-P> :bprev<CR>
	set formatoptions-=t
	set nowrap
	" Markdown
	let g:markdown_fenced_languages = ['lua','awk','py=python']
EOF


want=$Dir/.gitignore
[ -f "$want" ] || cat<<-'EOF'>$want
	# Swap
	[._]*.s[a-v][a-z]
	!*.svg  # comment out if you don't need vector files
	[._]*.sw[a-p]
	[._]s[a-rt-v][a-z]
	[._]ss[a-gi-z]
	[._]sw[a-p]
	
	# Session
	Session.vim
	Sessionx.vim
	
	# Temporary
	.netrwhist
	*~
	# Auto-generated tag files
	tags
	# Persistent undo
	[._]*.un~
	
	### Macos ###
	
	# General
	.DS_Store
	.AppleDouble
	.LSOverride
	
	# Icon must end with two \r
	Icon
	
	# Thumbnails
	._*
	
	# Files that might appear in the root of a volume
	.DocumentRevisions-V100
	.fseventsd
	.Spotlight-V100
	.TemporaryItems
	.Trashes
	.VolumeIcon.icns
	.com.apple.timemachine.donotpresent
	
	# Directories potentially created on remote AFP share
	.AppleDB
	.AppleDesktop
	Network Trash Folder
	Temporary Items
	.apdisk
EOF
	
want=$HOME/.tmux.conf
[ -f "$want" ] ||  cat<<-'EOF'> $want
	set -g aggressive-resize on
	unbind C-b
	set -g prefix C-Space
	bind C-Space send-prefix
	set -g base-index 1
	# start with pane 1
	bind | split-window -h -c "#{pane_current_path}"
	bind - split-window -v -c "#{pane_current_path}"
	unbind '"'
	unbind %
	# open new windows in the current path
	bind c new-window -c "#{pane_current_path}"
	# reload config file
	bind r source-file $Tnix/.config/dottmux
	unbind p
	bind p previous-window
	# shorten command delay
	set -sg escape-time 1
	# don't rename windows automatically
	set-option -g allow-rename off
	# mouse control (clickable windows, panes, resizable panes)
	set -g mouse on
	# Use Alt-arrow keys without prefix key to switch panes
	bind -n M-Left select-pane -L
	bind -n M-Right select-pane -R
	bind -n M-Up select-pane -U
	bind -n M-Down select-pane -D
	# enable vi mode keys
	set-window-option -g mode-keys vi
	# set default terminal mode to 256 colors
	set -g default-terminal "screen-256color"
	bind-key u capture-pane \;\
	    save-buffer /tmp/tmux-buffer \;\
	    split-window -l 10 "urlview /tmp/tmux-buffer"
	bind P paste-buffer
	bind-key -T copy-mode-vi v send-keys -X begin-selection
	bind-key -T copy-mode-vi y send-keys -X copy-selection
	bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
	# loud or quiet?
	set-option -g visual-activity off
	set-option -g visual-bell off
	set-option -g visual-silence off
	set-window-option -g monitor-activity off
	set-option -g bell-action none
	#  modes
	setw -g clock-mode-colour colour5
	# panes
	# statusbar
	set -g status-position top
	set -g status-justify left
	set -g status-bg colour232
	set -g status-fg colour137
	###set -g status-attr dim
	set -g status-left ''
	set -g status-right '#{?window_zoomed_flag,🔍,} #[fg=colour255,bold]#H #[fg=colour255,bg=colour19,bold] %b %d #[fg=colour255,bg=colour8,bold] %H:%M '
	set -g status-right '#{?window_zoomed_flag,🔍,} #[fg=colour255,bold]#H %H:%M '
	set -g status-right-length 50
	set -g status-left-length 20
	setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
	setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
	# messages
	# layouts
	bind S source-file $Tnix/.config/tmux-session1
	setw -g monitor-activity on
	set -g visual-activity on
EOF

startup
