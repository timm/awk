#!/usr/bin/env ./gold
# vim: filetype=awk : 
BEGIN {  main()  }

function main(   tab) {
  rowsRead(tab, dataFile("auto93"))
  oo(tab)
  rogues()  
}

function dataFile(f) { 
  return sprintf("%c%c/%c%c/keys/data/%s%ccsv",
                 46,46,46,46,f,46)}

#---------------------------------------------
function Rows(i,a,   name,c,what) {
  Obj(i)
  i.is="rows"
  has(i,"row") # 222
  has(i,"name")
  has(i,"col")
  for(c in a) has(i.col,c)
  for(c in a) {
    name = i.name[c]= a[c]
    column(i.col[c],c,name)
    if (name !~ /\?/) {
      name~ /[!-\+]/ ? i.y[c]=  1 : i.x[c] = 1
      if (name~ /-/)   i.y[c]= -1 }}}

function rows(i, a) {1
  "col" in i ? _rows(i,a) : Rows(i,a) } 

function _rows(i,a,    c,x,r,y) {
  r = 1 + length( i["row"]  )
  for(c in a)  
    i.row[r][c] = y= colAdd(i.col[c], a[c]);  y }

function rowsRead(i,file,   a,n) {
  file = file ? file : "-"
  while ((getline < file)> 0) { split($0,a,","); rows(i,a) }
  close(file) }

 #function _data1(col,x) {
 # function tabDist(tab,row1,row2,the) {
#   d=n=1E-31
#   for (c in tab[the["cols"]]) 
#      x=row1[c]; y =row1[c]
#      d=d+ (x==y=="?") ? 1 : (nump(tab["cols"][c]) ? numDist(
#      else {
#        d rowtab["cols"]
# x
# }
#---------------------------------------------
function add(i,x,f) {f=i.is"Add"; return @f(i,x) }
#---------------------------------------------
function Col(i,at, name) {
  Obj(i)
  i.is="col"
  i.n = 0
  i.at = at
  i.name = name }

function column(i, at, name,      what) {
  what = (name ~ /?/)     ? "Skip" : ( \
          name ~ /^[A-Z]/ ? "Num"  : "Sym")
  @what(i,at, name) }

function colAdd(i, x) {
  if (x != "?") {
      i.n++
      x = add(i,x) }
  return x }

#---------------------------------------------
function Skip(i,at,name) { Col(i,at,name); i.is="skip" }

function skipAdd(i,x) { return x }

#---------------------------------------------
function Num(i,at,name) {
  Col(i,at,name)
  i.is = "num"
  i.lo =  1E32 
  i.hi = -1E32 
  i.mu =  i.m2 = i.sd = 0 }

function numAdd(i,x,     d) {
  if(x< i.lo) i.lo = x
  if(x> i.hi) i.hi = x
  d     = x - i.mu
  i.mu += d/i.n
  i.m2 += d*(x-i.mu)
  i.sd  = (i.m2 < 0) ? 0 : ( \
          (i.n  < 2) ? 0 : (  \
           i.m2/(i.n-1))^0.5) 
  return x }

function norm(i,x) {
   return (x-i.lo)/(i.hi - i.lo +1E-31) }

#---------------------------------------------
function Sym(i,at,name) {
  Col(i,at,name)
  i.is="sym"
  has(i,"seen")
  i.mode = ""
  i.most = 0 }

function symAdd(col,x,     old,new) {
  old = x in col.seen ? col.seen[x] : 0
  new = col.seen[x] = 1 + old
  if (new  > col.most) {
    col.most  = new
    col.mode = x }
  return x}

#---------------------------------------------
function has(a,i) { a[i][0]; delete a[i][0] }
function Obj(a)   { split("",a,"") }

function oo(x,p,pre, i,txt) {
  txt = pre ? pre : (p DOT)
  _ooOrder(x)
  for(i in x)  {
    if (isarray(x[i]))   {
      print(txt i"" )
      oo(x[i],"","|  " pre)
    } else
      print(txt i (x[i]==""?"": ": " x[i])) } }

function _ooOrder(x,   i) {
  for (i in x)
    return PROCINFO["sorted_in"] =\
      typeof(i+1)=="number" ? "@ind_num_asc" : "@ind_str_asc" }

function rogues(    s) {
  for(s in SYMTAB) if (s ~ /^[A-Z][a-z]/) print "#W> Global " s>"/dev/stderr"
  for(s in SYMTAB) if (s ~ /^[_a-z]/    ) print "#W> Rogue: " s>"/dev/stderr" }
